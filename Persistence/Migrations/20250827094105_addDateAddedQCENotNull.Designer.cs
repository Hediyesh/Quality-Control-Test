// <auto-generated />
using System;
using ControlService.ControlPersistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ControlPersistence.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250827094105_addDateAddedQCENotNull")]
    partial class addDateAddedQCENotNull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ControlDomain.Entities.MLTools", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.Property<string>("ToolName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("MLTools");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Batch", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatchId"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BatchId");

                    b.ToTable("Batchs");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Defect", b =>
                {
                    b.Property<int>("DefectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefectId"));

                    b.Property<string>("DefectType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DefectId");

                    b.ToTable("Defects");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("MachineId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.MaintenanceLog", b =>
                {
                    b.Property<int>("MLId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MLId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("HoursSpent")
                        .HasColumnType("real");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<int?>("MachineId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaintenanceId")
                        .HasColumnType("int");

                    b.Property<int>("MaintenanceLogStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("MaintenanceLogStatusStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("MaintenanceTypeMaintenanceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("MLId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MachineId");

                    b.HasIndex("MachineId1");

                    b.HasIndex("MaintenanceId");

                    b.HasIndex("MaintenanceLogStatusId");

                    b.HasIndex("MaintenanceLogStatusStatusId");

                    b.HasIndex("MaintenanceTypeMaintenanceId");

                    b.ToTable("MaintenanceLogs");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.MaintenanceLogStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StatusId");

                    b.ToTable("MaintenanceLogStatuses");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.MaintenanceType", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceId"));

                    b.Property<string>("MaintenanceTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MaintenanceId");

                    b.ToTable("MaintenanceTypes");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductSKU")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.QualityControlEntry", b =>
                {
                    b.Property<int>("QCEId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QCEId"));

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<int?>("BatchId1")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CorrectiveAction")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DefectDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DefectId")
                        .HasColumnType("int");

                    b.Property<int?>("DefectId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<int?>("MachineId1")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int");

                    b.Property<int>("QualityDefective")
                        .HasColumnType("int");

                    b.Property<int>("QuantityInspected")
                        .HasColumnType("int");

                    b.Property<string>("RootCause")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SeverityId")
                        .HasColumnType("int");

                    b.Property<int?>("SeverityId1")
                        .HasColumnType("int");

                    b.HasKey("QCEId");

                    b.HasIndex("BatchId");

                    b.HasIndex("BatchId1");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DefectId");

                    b.HasIndex("DefectId1");

                    b.HasIndex("MachineId");

                    b.HasIndex("MachineId1");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId1");

                    b.HasIndex("SeverityId");

                    b.HasIndex("SeverityId1");

                    b.ToTable("QualityControlEntries");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Severity", b =>
                {
                    b.Property<int>("SeverityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeverityId"));

                    b.Property<string>("SeverityDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SeverityId");

                    b.ToTable("Severities");
                });

            modelBuilder.Entity("MachineProduct", b =>
                {
                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("MachineId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("MachineProduct");
                });

            modelBuilder.Entity("MaintenanceLogTools", b =>
                {
                    b.Property<int>("MLId")
                        .HasColumnType("int");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.HasKey("MLId", "ToolId");

                    b.HasIndex("ToolId");

                    b.ToTable("MaintenanceLogTools");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Category", b =>
                {
                    b.HasOne("ControlService.ControlDomain.Entities.Company", "Company")
                        .WithMany("Categories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Machine", b =>
                {
                    b.HasOne("ControlService.ControlDomain.Entities.Company", "Company")
                        .WithMany("Machines")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.MaintenanceLog", b =>
                {
                    b.HasOne("ControlService.ControlDomain.Entities.Company", "Company")
                        .WithMany("MaintenanceLogs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlService.ControlDomain.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlService.ControlDomain.Entities.Machine", null)
                        .WithMany("MaintenanceLogs")
                        .HasForeignKey("MachineId1");

                    b.HasOne("ControlService.ControlDomain.Entities.MaintenanceType", "MaintenanceType")
                        .WithMany()
                        .HasForeignKey("MaintenanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlService.ControlDomain.Entities.MaintenanceLogStatus", "MaintenanceLogStatus")
                        .WithMany()
                        .HasForeignKey("MaintenanceLogStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlService.ControlDomain.Entities.MaintenanceLogStatus", null)
                        .WithMany("MaintenanceLogs")
                        .HasForeignKey("MaintenanceLogStatusStatusId");

                    b.HasOne("ControlService.ControlDomain.Entities.MaintenanceType", null)
                        .WithMany("MaintenanceLogs")
                        .HasForeignKey("MaintenanceTypeMaintenanceId");

                    b.Navigation("Company");

                    b.Navigation("Machine");

                    b.Navigation("MaintenanceLogStatus");

                    b.Navigation("MaintenanceType");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Product", b =>
                {
                    b.HasOne("ControlService.ControlDomain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlService.ControlDomain.Entities.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.QualityControlEntry", b =>
                {
                    b.HasOne("ControlService.ControlDomain.Entities.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlService.ControlDomain.Entities.Batch", null)
                        .WithMany("QualityControlEntries")
                        .HasForeignKey("BatchId1");

                    b.HasOne("ControlService.ControlDomain.Entities.Company", "Company")
                        .WithMany("QualityControlEntries")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlService.ControlDomain.Entities.Defect", "Defect")
                        .WithMany()
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlService.ControlDomain.Entities.Defect", null)
                        .WithMany("QualityControlEntries")
                        .HasForeignKey("DefectId1");

                    b.HasOne("ControlService.ControlDomain.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlService.ControlDomain.Entities.Machine", null)
                        .WithMany("QualityControlEntries")
                        .HasForeignKey("MachineId1");

                    b.HasOne("ControlService.ControlDomain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlService.ControlDomain.Entities.Product", null)
                        .WithMany("QualityControlEntries")
                        .HasForeignKey("ProductId1");

                    b.HasOne("ControlService.ControlDomain.Entities.Severity", "Severity")
                        .WithMany()
                        .HasForeignKey("SeverityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlService.ControlDomain.Entities.Severity", null)
                        .WithMany("QualityControlEntries")
                        .HasForeignKey("SeverityId1");

                    b.Navigation("Batch");

                    b.Navigation("Company");

                    b.Navigation("Defect");

                    b.Navigation("Machine");

                    b.Navigation("Product");

                    b.Navigation("Severity");
                });

            modelBuilder.Entity("MachineProduct", b =>
                {
                    b.HasOne("ControlService.ControlDomain.Entities.Machine", null)
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlService.ControlDomain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MaintenanceLogTools", b =>
                {
                    b.HasOne("ControlService.ControlDomain.Entities.MaintenanceLog", null)
                        .WithMany()
                        .HasForeignKey("MLId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ControlDomain.Entities.MLTools", null)
                        .WithMany()
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Batch", b =>
                {
                    b.Navigation("QualityControlEntries");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Company", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Machines");

                    b.Navigation("MaintenanceLogs");

                    b.Navigation("Products");

                    b.Navigation("QualityControlEntries");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Defect", b =>
                {
                    b.Navigation("QualityControlEntries");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Machine", b =>
                {
                    b.Navigation("MaintenanceLogs");

                    b.Navigation("QualityControlEntries");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.MaintenanceLogStatus", b =>
                {
                    b.Navigation("MaintenanceLogs");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.MaintenanceType", b =>
                {
                    b.Navigation("MaintenanceLogs");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Product", b =>
                {
                    b.Navigation("QualityControlEntries");
                });

            modelBuilder.Entity("ControlService.ControlDomain.Entities.Severity", b =>
                {
                    b.Navigation("QualityControlEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
